Создаёт yarn.lock из файла package-lock.json npm в том же расположении или из существующей папки node_modules с установленным npm.

yarn import
Эта команда помогает перенести проекты, которые в настоящее время используют package-lock.json, сводя к минимуму различия между файлом блокировки и существующим деревом зависимостей.

Мотивация
Многие проекты в настоящее время используют package-lock.json или помещают node_modules в систему контроля версий, потому что у них нестабильные деревья зависимостей. Такие проекты не могут быть легко перенесены на Yarn, потому что yarn install может привести к совершенно другому логическому дереву зависимостей. Не все деревья могут быть представлены в Yarn с помощью yarn.lock, а некоторые допустимые деревья будут автоматически удалены при установке. Эти и другие нюансы создают значительные препятствия для переноса вручную.

yarn import Мы стремимся решить эту проблему, создавая файл yarn.lock одним из двух способов:

Использование дерева зависимостей в существующем package-lock.json файле, созданном npm install
Если такой файл не существует, используются версии, найденные внутри node_modules в соответствии с обычными правилами разрешения require.resolve()
В случаях, когда механизм разрешения зависимостей Yarn не может удовлетворить существующее дерево зависимостей, будут выдаваться предупреждения, чтобы вы могли вручную просмотреть изменения. Существующее node_modules дерево будет предварительно проверено на корректность (если не импортируется из package-lock.json), и результирующий файл блокировки должен быть yarn install без каких-либо неожиданностей (несовместимости, неразрешимых зависимостей, автоматического удаления дубликатов и т. д.).

$ yarn import
yarn import vx.x.x
success Folder in sync.
warning Using version "2.2.4" of "lru-cache" instead of "2.7.3" for "ngstorage > grunt > minimatch"
warning Using version "2.0.6" of "readable-stream" instead of "2.2.9" for "ngstorage > karma > chokidar > readdirp"
[...]
success Saved lockfile.
✨  Done in 11.96s.
Iphone!
